// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User models

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  role      UserRole @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient     Patient?
  doctor      Doctor?
  pharmacist  Pharmacist?
  receptionist Receptionist?
}

enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
  PHARMACIST
  RECEPTIONIST
}

// Patient information
model Patient {
  id           String   @id @default(uuid())
  userId       String   @unique
  name         String
  age          Int
  gender       String
  dateOfBirth  DateTime?
  phoneNumber  String?
  address      String?
  medicalHistory String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  prescriptions Prescription[]
  medicalReports MedicalReport[]
  conversations Conversation[]    // Added for conversation system
}

// Doctor information
model Doctor {
  id           String   @id @default(uuid())
  userId       String   @unique
  name         String
  department   String
  experience   Int
  location     String
  email        String
  bio          String?
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  availability DoctorAvailability[]
  prescriptions Prescription[]
  medicalReports MedicalReport[]
  conversations Conversation[]    // Added for conversation system
}

// Doctor availability slots
model DoctorAvailability {
  id        String   @id @default(uuid())
  doctorId  String
  date      DateTime
  timeSlot  String   // Store as "HH:MM" format
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, date, timeSlot])
}

// Appointment information
model Appointment {
  id          String   @id @default(uuid())
  patientId   String
  doctorId    String
  date        DateTime
  time        String   // Store as "HH:MM" or "HH:MM AM/PM" format
  type        String   // e.g., "Checkup", "Consultation", "Follow-up"
  status      AppointmentStatus @default(PENDING)
  symptoms    String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  IN_PROGRESS
}

// Prescription information
model Prescription {
  id           String   @id @default(uuid())
  patientId    String
  doctorId     String
  issueDate    DateTime @default(now())
  expiryDate   DateTime?
  status       PrescriptionStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  patient      Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor       Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  medications  PrescriptionMedication[]
  conversationMedications MedicationPrescription[] // Added for conversation system
}

enum PrescriptionStatus {
  ACTIVE
  COMPLETED
  EXPIRED
}

// Prescription medications (many-to-many relationship)
model PrescriptionMedication {
  id              String   @id @default(uuid())
  prescriptionId  String
  medicineId      String
  dosage          String
  frequency       String
  duration        String?
  instructions    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  prescription    Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  medicine        Medicine     @relation(fields: [medicineId], references: [id])
}

// Medical Reports
model MedicalReport {
  id          String   @id @default(uuid())
  patientId   String
  doctorId    String
  name        String
  type        ReportType
  fileUrl     String?
  results     String?
  date        DateTime @default(now())
  status      ReportStatus @default(PROCESSING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  testRequest TestRequest? // Added for conversation system
}

enum ReportType {
  BLOOD_TEST
  X_RAY
  MRI
  CT_SCAN
  ULTRASOUND
  OTHER
}

enum ReportStatus {
  PROCESSING
  READY
  REVIEWED
}

// Pharmacy related models
model Medicine {
  id                String   @id @default(uuid())
  name              String
  genericName       String?
  manufacturer      String?
  category          String?
  description       String?
  dosageForm        String?  // e.g., "Tablet", "Syrup", "Injection"
  strength          String?  // e.g., "500mg", "10mg/5ml"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  inventoryItems    InventoryItem[]
  prescriptionItems PrescriptionMedication[]
  conversationMedications MedicationPrescription[] // Added for conversation system
}

model InventoryItem {
  id            String   @id @default(uuid())
  medicineId    String
  batchNumber   String
  quantity      Int
  expiryDate    DateTime
  purchaseDate  DateTime @default(now())
  price         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  medicine      Medicine @relation(fields: [medicineId], references: [id])
}

// Staff models
model Pharmacist {
  id          String   @id @default(uuid())
  userId      String   @unique
  name        String
  licenseNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Receptionist {
  id          String   @id @default(uuid())
  userId      String   @unique
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// CONVERSATION SYSTEM MODELS

// Conversation model to track doctor-patient conversations
model Conversation {
  id            String          @id @default(uuid())
  patientId     String
  doctorId      String
  startedAt     DateTime        @default(now())
  status        ConversationStatus @default(ACTIVE)
  lastActivity  DateTime        @default(now())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  patient       Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor        Doctor          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  messages      Message[]
  testRequests  TestRequest[]
  medications   MedicationPrescription[]
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

// Message model for individual messages in a conversation
model Message {
  id              String         @id @default(uuid())
  conversationId  String
  senderId        String         // userId of sender (can be doctor or patient)
  senderRole      UserRole       // to easily identify if doctor or patient
  messageType     MessageType    @default(TEXT)
  content         String
  attachmentUrl   String?        // For images, PDFs, etc.
  readAt          DateTime?      // Track when message was read
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  conversation    Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

enum MessageType {
  TEXT
  SYMPTOMS
  MEDICAL_HISTORY
  DOCTOR_NOTES
  TEST_RESULT
  MEDICATION
}

// Model for tracking test requests
model TestRequest {
  id              String         @id @default(uuid())
  conversationId  String
  requestedBy     String         // doctorId
  testName        String
  testType        ReportType
  description     String?
  status          TestStatus     @default(REQUESTED)
  resultId         String?    @unique     // Link to the MedicalReport ID once uploaded @unique @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  conversation    Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  medicalReport   MedicalReport?  @relation(fields: [resultId], references: [id])
}

enum TestStatus {
  REQUESTED
  PENDING
  COMPLETED
  REVIEWED
}

// Model for tracking medication prescriptions within conversations
model MedicationPrescription {
  id              String         @id @default(uuid())
  conversationId  String
  prescribedBy    String         // doctorId
  prescriptionId  String?        // Optional link to formal Prescription if created
  medicineId      String
  dosage          String
  frequency       String
  duration        String?
  instructions    String?
  status          MedicationStatus @default(PRESCRIBED)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  conversation    Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  medicine        Medicine       @relation(fields: [medicineId], references: [id])
  prescription    Prescription?  @relation(fields: [prescriptionId], references: [id])
}

enum MedicationStatus {
  PRESCRIBED
  DISPENSED
  TAKING
  COMPLETED
}


