// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
  LAB_ASSISTANT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum medicineType {
  TABLET
  CAPSULE
  INJECTION
  OINTMENT
  SUPPOSITORY
  INHALER
}

model User {
  id        String @id @default(cuid()) 
  clerkId   String @unique
  name      String
  email     String @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient    Patient?
  doctor     Doctor?
  labAssistant LabAssistant?
}

model Patient {
  id           String @id @default(cuid()) 
  userId       String @unique @map("user_id")
  user         User   @relation(fields: [userId], references: [id])
  phone        String
  address      String
  city         String
  state        String
  zip          String
  country      String
  sex          String
  dob          DateTime
  bloodGroup   String
  weight       Int
  height       Int
  bloodPressure String
  isActive     Boolean @default(true)
  appointments Appointment[]
  medicines    Medicine[]
  reports      Report[]
  labTests     LabTest[]
  chats        Chat[]
  doctorPatients PatientDoctor[] // âœ… Many-to-many relation
}

model Doctor {
  id           String @id @default(cuid())
  userId       String @unique @map("user_id")
  user         User   @relation(fields: [userId], references: [id])
  department   String?
  availableSlots Json  
  bookedSlots  Json    
  appointments Appointment[]
  reports      Report[]
  medicines    Medicine[]
  labTests     LabTest[]
  chats        Chat[]
  patientDoctors PatientDoctor[] 
}


model PatientDoctor {
  doctorId  String
  patientId String
  doctor    Doctor @relation(fields: [doctorId], references: [id])
  patient   Patient @relation(fields: [patientId], references: [id])
  @@id([doctorId, patientId]) // Composite Primary Key
}



model Appointment {
  id                 String @id
  patientId          String
  patient            Patient @relation(fields: [patientId], references: [id])
  doctorId           String
  doctor            Doctor @relation(fields: [doctorId], references: [id])
  appointmentDate    DateTime
  appointmentTime    DateTime
  status             AppointmentStatus @default(PENDING)
  type               String?
  description        String?
  notes             String?
  paymentStatus      String @default("PENDING")
  createdAt         DateTime @default(now())
}

model Medicine {
  id           String @id
  name         String
  price        Int
  quantity     Int
  description  String
  medicineType medicineType
  patientId    String
  doctorId     String
  doctor       Doctor @relation(fields: [doctorId], references: [id])
  patient      Patient @relation(fields: [patientId], references: [id])
  orderStatus  String @default("PENDING")
  createdAt    DateTime @default(now())
}

model Report {
  id        String @id
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])
  doctorId  String
  doctor    Doctor @relation(fields: [doctorId], references: [id])
  details   String
  createdAt DateTime @default(now())
}

model LabTest {
  id        String @id
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])
  doctorId  String
  doctor    Doctor @relation(fields: [doctorId], references: [id])
  labAssistantId String?
  labAssistant LabAssistant? @relation(fields: [labAssistantId], references: [id])
  testDetails String
  status     String @default("PENDING")
  createdAt DateTime @default(now())
}

model LabAssistant {
  id       String @id
  userId   String @unique
  user     User @relation(fields: [userId], references: [id])
  labTests LabTest[]
}

model Chat {
  id        String @id
  doctorId  String?
  doctor    Doctor? @relation(fields: [doctorId], references: [id])
  patientId String?
  patient   Patient? @relation(fields: [patientId], references: [id])
  message   String
  createdAt DateTime @default(now())
}
